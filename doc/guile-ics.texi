\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-ics.info
@documentencoding UTF-8
@settitle Guile-ICS Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-ICS version @value{VERSION}.

Copyright (C) 2017-2022 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-ICS: (guile-ics).  Guile iCalendar (RFC5545) format parser.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-ICS Reference Manual
@subtitle For Guile-ICS @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-ICS Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::
* Tools::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-ICS is a @url{https://www.gnu.org/software/guile/, GNU Guile}
library that provides API for iCalendar
@url{https://tools.ietf.org/html/rfc5545, RFC5545} format parsing.

@node Installation
@chapter Installation

Guile-ICS sources are available form GitHub at
@url{https://github.com/artyom-poptsov/guile-ics}.  This section
describes Guile-ICS requirements and installation process.

Guile-ICS depends on the following packages:
@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0
@item @url{https://github.com/artyom-poptsov/guile-smc, Guile-SMC}, 0.4.0
@end itemize

@section GNU Guix

@example
$ guix install guile-ics
@end example

@subsection Development version
@example
$ guix build -f ./guix.scm
$ guix package -f ./guix.scm
@end example

@section Manual Installation

To build the latest version of Guile-ICS from the sources, you need to
download the sources from GitHub or clone them using Git@footnote{A good
introduction to Git is free Pro Git book, which is available online at
@url{https://git-scm.com/book/en/v2}}.

Cloning can be done as follows:

@example
$ git clone git@@github.com:artyom-poptsov/guile-ics.git
@end example

Next, you should configure the sources:

@example
$ cd guile-ics/
$ autoreconf -vif
$ ./configure
@end example

And finally build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

This chapter describes the Guile-ICS API.  The first thing that should
be discussed are iCalendar streams.

@section iCalendar streams

Main module for Guile-ICS is @code{(ics)}.  The module contains main
procedures for reading and writing iCalendar data.

The data comes in the form of iCalendar streams: these streams consist
of one or more iCalendar objects (described in the next section.)

Example of an iCalendar stream of one iCalendar object from RFC5545,
section 3.4:

@example
BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
BEGIN:VEVENT
UID:19970610T172345Z-AF23B2@@example.com
DTSTAMP:19970610T172345Z
DTSTART:19970714T170000Z
DTEND:19970715T040000Z
SUMMARY:Bastille,Day\,Party
X-WR-TIMEZONE;VALUE=TEXT:Europe/Brussels
END:VEVENT
END:VCALENDAR
@end example

Let's assume that this iCaneldar object is written in a file
@file{example.ics}, then we can convert it to a Scheme representation
using @code{ics->scm} procedure:

@lisp
(ics->scm (open-input-file "example.ics"))
@result{} (#<ics-object VCALENDAR 23cf630>)
@end lisp

The procedures below can be used to convert iCalendar streams to Scheme
lists of iCalendar objects and vice versa.

@section Guile-ICS Main Classes

@subsection <ics-content>

A common class that represents generic iCalendar contents.  The class is
defined in @code{(ics content)} module.

@subsubsection Fields

@multitable @columnfractions .25 .25 .5
@headitem Init Keyword @tab Type @tab Description
@item #:name
@tab <string>
@tab The name of an iCalendar content.
@end multitable

@subsubsection Public Methods

@deffn {Method} ics-content-name ics-content
Returns the name of a @var{ics-content} object.
@end deffn

@subsubsection Miscellaneous Procedures

@deffn {Scheme Procedure} ics-write-line obj [port=(current-output-port)]
Display an @var{obj} to a @var{port} with CRLF line ending.
@end deffn

@deffn {Scheme Procedure} ics-format dest fmt . arg
Write output specified by a @var{fmt} string to a destination @var{dest}
with CRLF line ending.
@end deffn

@deffn {Scheme Procedure} scm->ics-value value
Convert a @var{value} to iCalendar format string.  @var{value} can be
either a list of strings or a string.
@end deffn

@subsection <ics-object>

iCalendar object (see RFC5545, section 3) stores calendaring and
scheduling information.  iCalendar object class consists of a sequence
of calendar properties and one or more iCalendar component. Each
component is an iCalendar object (that is, instances of
@code{<ics-object>} class) on its own; that means that this data
structure can be handled recusively.

The class is defined in @code{(ics object)} module.

@subsubsection Fields

@multitable @columnfractions .25 .25 .5
@headitem Init Keyword @tab Type @tab Description
@item #:properties
@tab <list>
@tab iCalendar object properties (instances of @code{<ics-property>} class).
@item #:components
@tab <list>
@tab iCalendar components (see RFC5545, section 3.6.).
Components are instances of @code{<ics-object>} class themselves.
@end multitable

@subsubsection Public Methods

@deffn {method} ics-object-name ics-object
Return an @var{ics-object} name.
@end deffn

@deffn {method} ics-object-properties ics-object
Return an @var{ics-object} properties list.
@end deffn

@deffn {method} ics-object-property-ref ics-object name
Return an @var{ics-object} property value by a @var{name}.
@end deffn

@deffn {method} ics-object-components ics-object
Return an @var{ics-object} components list.
@end deffn

@deffn {method} ics-object->ics ics-object port
Convert an @var{ics-object} to a iCalendar format and print the result
to a specified @var{port}.
@end deffn

@subsection <ics-property>

A property is the definition of an individual attribute describing a
calendar object (see RFC5545, section 3.5.)  Since Guile-ICS tries to
unify the way of handling iCalendar information, iCalendar property
class is used for both iCalendar objects (as defined in RFC5545) and for
components of iCalendar objects.

The class is defined in @code{(ics type property)} module.

@subsubsection Fields

@multitable @columnfractions .25 .25 .5
@headitem Init Keyword @tab Type @tab Description
@item #:type
@tab <symbol> || #f
@tab iCalendar type name as described in RFC5545, 3.2.20.
@item #:value
@tab <string>
@tab iCalendar property value.
@item #:parameters
@tab <alist>
@tab iCalendar property parameters (see RFC5545, section 3.2.),
stored as an association list.
@end multitable

@subsubsection Public Methods

@deffn {method} ics-property? x
Check if @var{x} is an instance of @code{<ics-property>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property-type ics-property
Get the type of an @var{ics-property}.
@end deffn

@deffn {method} ics-property-name ics-property
Return an @var{ics-property} name.
@end deffn

@deffn {method} ics-property-value ics-property
Return an @var{ics-property} value.
@end deffn

@deffn {method} ics-property-parameters ics-property
Return an @var{ics-property} parameters association list.
@end deffn

@deffn {method} ics-property-parameter-ref ics-property name
Return an @var{ics-property} value for a parameter with a given
@var{name}.  Return @code{#f} if no parameter found.
@end deffn

@deffn {method} ics-property-parameter-set! ics-property name value
Set an iCalendar @var{ics-property} parameter @var{name} to a
@var{value}.
@end deffn

@deffn {method} ics-typed-property->ics-property ics-property
A generic method.  Convert an @var{ics-property} to an untyped version.
For @code{<ics-property>} this methods bascally does nothing and returns
@var{ics-property} as is.
@end deffn

@subsubsection Miscellaneous Methods

These procedures are defined in @code{(ics type property)}.

@deffn {Method} ics-property-determine-type ics-property
Determine the type of an @var{ics-property}, return the type as a
symbol.
@end deffn

@deffn {method} ics-property->string ics-property
Convert an @var{ics-property} to an iCalendar string, return the string.
@end deffn

@deffn {method} ics-property->typed-property ics-property
Convert a generic @var{ics-property} to a typed version of itself;
return a new typed property.
@end deffn

@subsection <ics-stream>

The class is defined in @code{(ics stream)} module.

@subsubsection Fields

@multitable @columnfractions .25 .25 .5
@headitem Init Keyword @tab Type @tab Description
@item #:source
@tab <port> || <string>
@tab iCalendar data source.
@item #:parse-types?
@tab <boolean>
@tab Should the parser parse the types?
@end multitable

@subsubsection Public Methods

@deffn {method} ics-stream-source ics-stream
Return a source of an @var{ics-stream}.
@end deffn

@deffn {method} ics-stream-parser ics-stream
Make a new iCalendar stream parser for an @var{ics-stream}, return a
new parser.
@end deffn

@deffn {Method} ics-stream-parse-types? ics-stream
Return @code{#t} if the parser should parse the iCalendar types,
@code{#f} otherwise.
@end deffn

@deffn {method} ics-stream->scm ics-stream
Convert an @var{ics-stream} to a Scheme list of iCalendar objects
(@code{<ics-object>}).  Return the list.
@end deffn

@deffn {method} ics-stream->scm-stream ics-stream
Convert an @var{ics-stream} to a SRFI-41 stream.  Return the stream.
@end deffn

@section Guile-ICS Property Types

@subsection <ics-property:binary>

The class is defined in @code{(ics type binary)} module.

@subsubsection Public Methods

@deffn {method} ics-property:binary? x
Check if @var{x} is an instance of @code{<ics-property:binary>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:binary property
Convert a @var{property} to a its typed version.
@end deffn

@deffn {method} ics-property:binary-encoding property
Get binary encoding for a @var{property}.  The encoding value is either
"8BIT" (RFC2045) or "BASE64" (RFC4648).
@end deffn

@subsection <ics-property:boolean>

The class is defined in @code{(ics type boolean)} module.

@subsubsection Public Methods

@deffn {method} ics-property:boolean? x
Check if @var{x} is an instance of @code{<ics-property:boolean>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:boolean property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:cal-address>

The class is defined in @code{(ics type cal-address)} module.

@subsubsection Public Methods

@deffn {method} ics-property:boolean? x
Check if @var{x} is an instance of @code{<ics-property:cal-address>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:cal-address property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:date>

The class is defined in @code{(ics type date)} module.

@subsubsection Public Methods

@deffn {method} ics-property:date? x
Check if @var{x} is an instance of @code{<ics-property:date>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:date property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:date-time>

The class is defined in @code{(ics type date-time)} module.

@subsubsection Public Methods

@deffn {method} ics-property:date-time? x
Check if @var{x} is an instance of @code{<ics-property:date-time>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:date-time property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:duration>

The class is defined in @code{(ics type duration)} module.

@subsubsection Public Methods

@deffn {method} ics-property:duration? x
Check if @var{x} is an instance of @code{<ics-property:duration>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:duration property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:float>

The class is defined in @code{(ics type float)} module.

@subsubsection Public Methods

@deffn {method} ics-property:float? x
Check if @var{x} is an instance of @code{<ics-property:float>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:float property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:integer>

The class is defined in @code{(ics type integer)} module.

@subsubsection Public Methods

@deffn {method} ics-property:integer? x
Check if @var{x} is an instance of @code{<ics-property:integer>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:integer property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:period>

The class is defined in @code{(ics type period)} module.

@subsubsection Public Methods

@deffn {method} ics-property:period? x
Check if @var{x} is an instance of @code{<ics-property:period>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:period property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:recur>

The class is defined in @code{(ics type recur)} module.

@subsubsection Public Methods

@deffn {method} ics-property:recur? x
Check if @var{x} is an instance of @code{<ics-property:recur>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:recur property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:text>

The class is defined in @code{(ics type text)} module.

@subsubsection Public Methods

@deffn {method} ics-property:text? x
Check if @var{x} is an instance of @code{<ics-property:text>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:text property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:time>

The class is defined in @code{(ics type time)} module.

@subsubsection Public Methods

@deffn {method} ics-property:time? x
Check if @var{x} is an instance of @code{<ics-property:time>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:time property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:uri>

The class is defined in @code{(ics type uri)} module.

@subsubsection Public Methods

@deffn {method} ics-property:uri? x
Check if @var{x} is an instance of @code{<ics-property:uri>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:uri property
Convert a @var{property} to a its typed version.
@end deffn

@subsection <ics-property:utc-offset>

The class is defined in @code{(ics type utc-offset)} module.

@subsubsection Public Methods

@deffn {method} ics-property:utc-offset? x
Check if @var{x} is an instance of @code{<ics-property:utc-offset>}, return
@code{#t} if it is, @code{#f} otherwise.
@end deffn

@deffn {method} ics-property->ics-property:utc-offset property
Convert a @var{property} to a its typed version.
@end deffn


@section iCalendar to Scheme converters

@deffn {Scheme Procedure} ics->scm [port=(current-input-port)]
Convert a iCalendar stream from a @var{port} to a Scheme representation;
return a list of iCalendar objects.
@end deffn

@deffn {Scheme Procedure} ics-string->scm str
Convert an iCalendar string @var{str} to a Scheme representation; return
a list of iCalendar objects.
@end deffn

@deffn {Scheme Procedure} scm->ics ics-object [port=(current-output-port)]
Convert an @var{ics-object} to iCalendar format.  Print the output to a
@var{port}.
@end deffn

@deffn {Scheme Procedure} scm->ics-string ics-object
Convert an @var{ics-object} to an iCalendar format string; return the
string.
@end deffn

@deffn {Scheme Procedure} ics->stream [port (current-input-port)]
Convert an ICS stream from a @var{port} to an SRFI-41 stream
(@pxref{SRFI-41,,, guile, The GNU Guile Reference Manual}).  Return the
stream.

Example:

@lisp
(use-modules (srfi srfi-41)
             (ice-9 pretty-print)
             (ics))

(let ((p (open-input-file "data.ics")))
  (stream-for-each (lambda (ics-object)
                     (pretty-print ics-object))
                   (ics->stream p)))
@end lisp

@end deffn

@section Extra Converters

@code{(ics conv)} module provides procedures for converting iCalendar
objects to other formats.

@deffn {Scheme Procedure} ics-object->org-mode ics-object [port=(current-output-port)]
Convert an @var{ics-object} to org-mode format (@pxref{Top,,, org, Org
Mode Manual}) and print the results to a @var{port}.
@end deffn

@section Miscellaneous Methods and Procedures

Those methods and procedures are available from @code{(ics)} module.

@deffn {Method} ics-describe x
Describe iCalendar content in a human-readable form.  Return value is
undefined.
@end deffn

@deffn {Scheme Procedure} ics-pretty-print ics-object [port=(current-output-port)] [#:indent=2] [#:show-types?=#f]
Pretty-print an @var{ics-object} to a @var{port}.  Note that the output
is intended for human to comprehent, not to a machine to parse.
@end deffn

@deffn {Scheme Procedure} ics-debug-set! enabled?
Enable or disable debug mode for the library.
@end deffn

@section Examples

See the @file{examples} directory.

@section Finite-State Machine (FSM)

The @code{(ics fsm)} module contains an implementation of a FSM that
parses iCalendar data.

@deffn {Scheme Procedure} ics-token-begin? x
Check if an @var{x} is the beginning of an IANA token.
@end deffn

@deffn {Scheme Procedure} ics-token-end? x
Check if an @var{x} is the ending of an IANA token.
@end deffn

@deffn {Scheme Procedure} ics-calendar-object? x
Check if @var{x} is a iCalendar object.
@end deffn

@deffn {Scheme Procedure} fsm-read-property parser
Read iCalendar property using a @var{parser}.
@end deffn

@deffn {Scheme Procedure} fsm-skip-property parser
Skip current iCalendar property using a @var{parser}.
@end deffn

@deffn {Scheme Procedure} fsm-read-ical-object parser object-name icalprops component
Read an iCalendar object @var{object-name} from an iCalendar stream
using a @var{parser}.  Return an object with iCalendar properties
@var{ical-props} and a @var{component} list.
@end deffn

@deffn {Scheme Procedure} fsm-read-ical-stream parser result
Read iCalendar stream using a @var{parser}, return a list of
@code{<ical-object>} instances.
@end deffn

@section Version

@code{(ics version)} contains procedures that allow to acquire
information about the Guile-ICS version in the
@url{https://semver.org/, Semantic Versioning format}.

Guile-ICS version consists of three parts: MAJOR.MINOR.PATCH

The procedures below allow to get any of the version part or the version as a
whole.

@cindex Versioning
@deffn {Scheme Procedure} ics-version
Return the Guile-ICS version as a list of the following form:
@example lisp
'(MAJOR MINOR PATCH)
@end example

@end deffn

@deffn {Scheme Procedure} ics-version/string
Get the raw Guile-ICS version as a string.
@end deffn

@deffn {Scheme Procedure} ics-version/major
Get the ``MAJOR'' part of the Guile-ICS version.
@end deffn

@deffn {Scheme Procedure} ics-version/minor
Get the ``MINOR'' part of the Guile-ICS version.
@end deffn

@deffn {Scheme Procedure} ics-version/patch
Get the ``PATCH'' part of the Guile-ICS version.
@end deffn

@node Tools
@chapter Tools

There is a tool called @command{ics} that allows to handle iCalendar
data.

The default behaviour of the program is to read a iCalendar stream from
stdin and pretty-print it to the stdout.

See @command{ics --help} for usage information.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
